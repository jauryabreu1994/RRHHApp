@model IEnumerable<RRHHApp.Models.Usuarios.Usuario>

@{
    ViewBag.Title = "Organigrama de Usuarios";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



    
    <div class="pagetitle">
        <h1>@ViewBag.Title</h1>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#">Usuario</a></li>
                <li class="breadcrumb-item">@ViewBag.Title</li>
            </ol>
        </nav>
    </div><!-- End Page Title -->

    <section class="section">
        <div class="row">
            <div class="col-lg-12">

                <div class="card">
                    <div class="card-body">

                        <script src="https://unpkg.com/gojs@2.2.14/release/go.js"></script>
                        <div id="allSampleContent" class="p-4 w-full">
                            <link rel="stylesheet" href="https://unpkg.com/gojs@2.2.14/extensions/DataInspector.css">
                            <script src="https://unpkg.com/gojs@2.2.14/extensions/DataInspector.js"></script>
                            <script id="code">
                                function init() {

                                    // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make
                                    // For details, see https://gojs.net/latest/intro/buildingObjects.html
                                    const $ = go.GraphObject.make;  // for conciseness in defining templates

                                    myDiagram =
                                        $(go.Diagram, "myDiagramDiv", // must be the ID or reference to div
                                            {
                                                allowCopy: false,
                                                allowDelete: false,
                                                //initialAutoScale: go.Diagram.Uniform,
                                                maxSelectionCount: 1, // users can select only one part at a time
                                                validCycle: go.Diagram.CycleDestinationTree, // make sure users can only create trees
                                                "clickCreatingTool.archetypeNodeData": { // allow double-click in background to create a new node
                                                    name: "(new person)",
                                                    title: "",
                                                    comments: ""
                                                },
                                                "clickCreatingTool.insertPart": function (loc) {  // override to scroll to the new node
                                                    const node = go.ClickCreatingTool.prototype.insertPart.call(this, loc);
                                                    if (node !== null) {
                                                        this.diagram.select(node);
                                                        this.diagram.commandHandler.scrollToPart(node);
                                                        this.diagram.commandHandler.editTextBlock(node.findObject("NAMETB"));
                                                    }
                                                    return node;
                                                },
                                                layout:
                                                    $(go.TreeLayout,
                                                        {
                                                            treeStyle: go.TreeLayout.StyleLastParents,
                                                            arrangement: go.TreeLayout.ArrangementHorizontal,
                                                            // properties for most of the tree:
                                                            angle: 90,
                                                            layerSpacing: 35,
                                                            // properties for the "last parents":
                                                            alternateAngle: 90,
                                                            alternateLayerSpacing: 35,
                                                            alternateAlignment: go.TreeLayout.AlignmentBus,
                                                            alternateNodeSpacing: 20
                                                        }),
                                                "undoManager.isEnabled": true // enable undo & redo
                                            });

                                    // when the document is modified, add a "*" to the title and enable the "Save" button
                                    myDiagram.addDiagramListener("Modified", e => {
                                        const button = document.getElementById("SaveButton");
                                        if (button) button.disabled = !myDiagram.isModified;
                                        const idx = document.title.indexOf("*");
                                        if (myDiagram.isModified) {
                                            if (idx < 0) document.title += "*";
                                        } else {
                                            if (idx >= 0) document.title = document.title.slice(0, idx);
                                        }
                                    });


                                    const levelColors = ["#047229"];

                                    // override TreeLayout.commitNodes to also modify the background brush based on the tree depth level
                                    myDiagram.layout.commitNodes = function () {
                                        go.TreeLayout.prototype.commitNodes.call(this);  // do the standard behavior
                                        // then go through all of the vertexes and set their corresponding node's Shape.fill
                                        // to a brush dependent on the TreeVertex.level value
                                        myDiagram.layout.network.vertexes.each(v => {
                                            if (v.node) {
                                                const level = v.level % (levelColors.length);
                                                const color = levelColors[level];
                                                const shape = v.node.findObject("SHAPE");
                                                if (shape) shape.stroke = $(go.Brush, "Linear", { 0: color, 1: go.Brush.lightenBy(color, 1), start: go.Spot.Left, end: go.Spot.Right });
                                            }
                                        });
                                    };

                                    // this is used to determine feedback during drags
                                    function mayWorkFor(node1, node2) {
                                        if (!(node1 instanceof go.Node)) return false;  // must be a Node
                                        if (node1 === node2) return false;  // cannot work for yourself
                                        if (node2.isInTreeOf(node1)) return false;  // cannot work for someone who works for you
                                        return true;
                                    }

                                    // This function provides a common style for most of the TextBlocks.
                                    // Some of these values may be overridden in a particular TextBlock.
                                    function textStyle() {
                                        return { font: "9pt  Segoe UI,sans-serif", stroke: "white" };
                                    }

                                    // This converter is used by the Picture.
                                    function findHeadShot(pic) {
                                        if (!pic) return "images/HSnopic.png"; // There are only 16 images on the server
                                        return "images/HS" + pic;
                                    }

                                    // define the Node template
                                    myDiagram.nodeTemplate =
                                        $(go.Node, "Spot",
                                            {
                                                selectionObjectName: "BODY",
                                                mouseEnter: (e, node) => node.findObject("BUTTON").opacity = node.findObject("BUTTONX").opacity = 1,
                                                mouseLeave: (e, node) => node.findObject("BUTTON").opacity = node.findObject("BUTTONX").opacity = 0,
                                                // handle dragging a Node onto a Node to (maybe) change the reporting relationship
                                                mouseDragEnter: (e, node, prev) => {
                                                    const diagram = node.diagram;
                                                    const selnode = diagram.selection.first();
                                                    if (!mayWorkFor(selnode, node)) return;
                                                    const shape = node.findObject("SHAPE");
                                                    if (shape) {
                                                        shape._prevFill = shape.fill;  // remember the original brush
                                                        shape.fill = "darkred";
                                                    }
                                                },
                                                mouseDragLeave: (e, node, next) => {
                                                    const shape = node.findObject("SHAPE");
                                                    if (shape && shape._prevFill) {
                                                        shape.fill = shape._prevFill;  // restore the original brush
                                                    }
                                                },
                                                mouseDrop: (e, node) => {
                                                    const diagram = node.diagram;
                                                    const selnode = diagram.selection.first();  // assume just one Node in selection
                                                    if (mayWorkFor(selnode, node)) {
                                                        // find any existing link into the selected node
                                                        const link = selnode.findTreeParentLink();
                                                        if (link !== null) {  // reconnect any existing link
                                                            link.fromNode = node;
                                                        } else {  // else create a new link
                                                            diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);
                                                        }
                                                    }
                                                }
                                            },
                                            // for sorting, have the Node.text be the data.name
                                            new go.Binding("text", "name"),
                                            // bind the Part.layerName to control the Node's layer depending on whether it isSelected
                                            new go.Binding("layerName", "isSelected", sel => sel ? "Foreground" : "").ofObject(),
                                            $(go.Panel, "Auto",
                                                { name: "BODY" },
                                                // define the node's outer shape
                                                $(go.Shape, "Rectangle",
                                                    { name: "SHAPE", fill: "#64B880", stroke: 'white', strokeWidth: 3.5, portId: "" }),
                                                $(go.Panel, "Horizontal",

                                                    // define the panel where the text will appear
                                                    $(go.Panel, "Table",
                                                        {
                                                            minSize: new go.Size(130, NaN),
                                                            maxSize: new go.Size(150, NaN),
                                                            margin: new go.Margin(6, 10, 0, 6),
                                                            defaultAlignment: go.Spot.Left
                                                        },
                                                        $(go.RowColumnDefinition, { column: 2, width: 4 }),
                                                        $(go.TextBlock, textStyle(),  // the name
                                                            {
                                                                name: "NAMETB",
                                                                row: 0, column: 0, columnSpan: 5,
                                                                font: "12pt Segoe UI,sans-serif",
                                                                editable: true, isMultiline: false,
                                                                minSize: new go.Size(50, 16)
                                                            },
                                                            new go.Binding("text", "name").makeTwoWay()),
                                                        $(go.TextBlock, "Posicion: ", textStyle(),
                                                            { row: 1, column: 0 }),
                                                        $(go.TextBlock, textStyle(),
                                                            {
                                                                row: 1, column: 1, columnSpan: 4,
                                                                editable: true, isMultiline: false,
                                                                minSize: new go.Size(50, 14),
                                                                margin: new go.Margin(0, 0, 0, 3)
                                                            },
                                                            new go.Binding("text", "title").makeTwoWay()),
                                                        $(go.TextBlock, textStyle(),
                                                            { row: 2, column: 0 },
                                                            new go.Binding("text", "key", v => "Codigo: " + v)),
                                                        $(go.TextBlock, textStyle(),  // the comments
                                                            {
                                                                row: 3, column: 0, columnSpan: 5,
                                                                font: "italic 9pt sans-serif",
                                                                wrap: go.TextBlock.WrapFit,
                                                                editable: true,  // by default newlines are allowed
                                                                minSize: new go.Size(100, 14)
                                                            },
                                                            new go.Binding("text", "comments").makeTwoWay())
                                                    ) // end Table Panel
                                                ) // end Horizontal Panel
                                            ), // end Auto Panel
                                            $("Button",
                                                $(go.Shape, "PlusLine", { width: 10, height: 10 }),
                                                {
                                                    name: "BUTTON", alignment: go.Spot.Right, opacity: 0,  // initially not visible
                                                    click: (e, button) => addEmployee(button.part)
                                                },
                                                // button is visible either when node is selected or on mouse-over
                                                new go.Binding("opacity", "isSelected", s => s ? 1 : 0).ofObject()
                                            ),
                                            new go.Binding("isTreeExpanded").makeTwoWay(),
                                            $("TreeExpanderButton",
                                                {
                                                    name: "BUTTONX", alignment: go.Spot.Bottom, opacity: 0,  // initially not visible
                                                    "_treeExpandedFigure": "TriangleUp",
                                                    "_treeCollapsedFigure": "TriangleDown"
                                                },
                                                // button is visible either when node is selected or on mouse-over
                                                new go.Binding("opacity", "isSelected", s => s ? 1 : 0).ofObject()
                                            )
                                        );  // end Node, a Spot Panel





                                    // define the Link template
                                    myDiagram.linkTemplate =
                                        $(go.Link, go.Link.Orthogonal,
                                            { layerName: "Background", corner: 5 },
                                            $(go.Shape, { strokeWidth: 1.5, stroke: "#047229" }));  // the link shape

                                    // read in the JSON-format data from the "mySavedModel" element
                                    load();


                                    // support editing the properties of the selected person in HTML
                                    if (window.Inspector) myInspector = new Inspector("myInspector", myDiagram,
                                        {
                                            properties: {
                                                "key": { readOnly: true },
                                                "comments": {}
                                            }
                                        });

                                    // Setup zoom to fit button
                                    document.getElementById('zoomToFit').addEventListener('click', () => myDiagram.commandHandler.zoomToFit());

                                    document.getElementById('centerRoot').addEventListener('click', () => {
                                        myDiagram.scale = 1;
                                        myDiagram.commandHandler.scrollToPart(myDiagram.findNodeForKey(1));
                                    });
                                } // end init


                                // Show the diagram's model in JSON format
                                function save() {
                                    document.getElementById("mySavedModel").value = myDiagram.model.toJson();
                                    myDiagram.isModified = false;
                                }
                                function load() {
                                    var array = "@ViewBag.Usuarios";
                                    array = array.replaceAll('*', '"');
                                    console.log(array);
                                    var chart = '{ "class": "go.TreeModel",  "nodeDataArray": [ ' + array + ' ]}';

                                    console.log(chart);
                                    myDiagram.model = go.Model.fromJson(chart);
                                    // make sure new data keys are unique positive integers
                                    let lastkey = 1;
                                    myDiagram.model.makeUniqueKeyFunction = (model, data) => {
                                        let k = data.key || lastkey;
                                        while (model.findNodeDataForKey(k)) k++;
                                        data.key = lastkey = k;
                                        return k;
                                    };
                                }

                                window.addEventListener('DOMContentLoaded', init);

                            </script>
                            <div id="sample">
                                <div id="myDiagramDiv" style="background-color: whitesmoke; border: 1px solid black; height: 800px; position: relative; -webkit-tap-highlight-color: green">
                                    <canvas tabindex="0" width="1054" height="551" style="position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; touch-action: none; width: 1054px; height: 551px;"></canvas>
                                    <div style="position: absolute; overflow: auto; width: 1054px; height: 568px; z-index: 1;">
                                        <div style="position: absolute; width: 1748.83px; height: 1px;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

            </div>
        </div>
    </section>
